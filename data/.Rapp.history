prepData(tree, cdm)
prepped <- prepData(tree, cdm)
calcMetrics(prepped)
as.data.frame(calcMetrics(prepped))
48*8
4500*12
19/12
318.80-306=a
318.80-306->a
a
168-154
14+12.8
424-7->a
b <- 902-7
c <- 933-7
d <- 189-7
e <- 32-7
f <- 23-7
g <- 1825-7
h <- 784-7
a+b+c+d+e+f+g+h
7*8
70-56
927+896+183+26+17+1819+778+418
install.packages(c("R6","lazyeval","BH"))
install.packages(c("Rcpp"))
library(devtools)
install_github("metricTester", username="eliotmiller")
library(metricTester)
metricsNnulls
sqrt(100)
30^2
sqrt
9100
sqrt(1000)
library(phytools)
library(geiger)
tree <- sim.bdtree(b=1, stop="taxa", n=100)
plot(tree)
trait <- rnorm(n=100, mean=100)
trait
names(trait) <- tree$tip.label
contMap(tree=tree, x=trait)
library(ecodist)#
#
stupid <- function(dimensions)#
{#
	results <- data.frame(rnorm(1000))#
	for(i in 1:(dimensions-1))#
	{#
		results <- cbind(results, rnorm(1000))#
	}#
	names(results) <- paste("traits", 1:dimensions, sep="")#
	return(results)#
}#
#
traits <- stupid(100)
head(traits)
library(ecodist)#
#
stupid <- function(dimensions)#
{#
	results <- data.frame(rnorm(1000))#
	for(i in 1:(dimensions-1))#
	{#
		results <- cbind(results, rnorm(1000))#
	}#
	names(results) <- paste("traits", 1:dimensions, sep="")#
	return(results)#
}#
#
traits <- stupid(3)
head(traits)
traits <- as.matrix(traits)#
#
row.names(traits) <- 1:1000#
#
samples <- 2:30#
#
samples <- samples^2#
#
secondTable <- matrix(nrow=length(samples), ncol=1000, 0)
head(secondTable)
sum(secondTable[,1])
sum(secondTable[1,])
fdisSingle <- function(traits, samples)#
{#
	roadMap <- matrix(nrow=length(samples), ncol=dim(traits)[1], 0)#
	for(i in 1:dim(roadMap)[1])#
	{#
		roadMap[i,][sample(1:length(roadMap[i,]), samples[i])] <- 1#
	}#
#
	roadMap <- as.data.frame(roadMap)#
	row.names(roadMap) <- samples#
	names(roadMap) <- 1:dim(traits)[1]#
#
	results <- FDis(traits, roadMap)#
	return(results)#
}#
#
fdisRandomizer <- function(traits, samples, iterations)#
{#
	results <- matrix(nrow=iterations, ncol=length(samples), 0)#
#
	for(i in 1:iterations)#
	{#
		results[i,] <- fdisSingle(traits, samples)#
	}#
	return(results)#
}#
#
system.time(tempResults <- fdisRandomizer(traits, samples, 1000))
#this function returns the weighted centroids per cloud of points in multivariate space#
#given some ordination results and a road map telling which point belongs to which cluster#
#e.g. a file you have occasionally called "secondTable.csv"#
#
centers <- function(ordination.results, road.map)#
{#
	results <- matrix(ncol=dim(ordination.results)[2], nrow=dim(road.map)[1])#
	for(i in 1:dim(road.map)[1])#
	{#
		results[i,] <- apply(ordination.results, 2, weighted.mean, w=road.map[i,])#
	}#
	row.names(results) <- row.names(road.map)#
	return(results)#
}
#this function determines the weighted centroid of each cloud of points and then#
#determines the mean absolute deviation (weighted) from each centroid per cloud#
#
FDis <- function(ordination.results, road.map)#
{	#
	require(ecodist)#
#
	results <- c()#
#
	centerPoints <- centers(ordination.results, road.map)#
#
	temp <- rbind(ordination.results, centerPoints)#
	allDistances <- dist(temp)#
	distMatrix <- full(allDistances)#
	for(i in 1:dim(road.map)[1])#
	{#
		#figure out which column corresponds to distances from the weighted centroids#
		#pull it out and get rid of the final elements (distances among centroids)#
		centroidDists <- distMatrix[,dim(road.map)[2]+i]#
		centroidDists <- centroidDists[1:(length(centroidDists)-(dim(road.map)[1]))]#
		#now calculate the weighted mean distance from this centroid#
		results[i] <- weighted.mean(centroidDists, road.map[i,])#
	}#
	names(results) <- row.names(road.map)#
#
	return(results)#
}
fdisSingle <- function(traits, samples)#
{#
	roadMap <- matrix(nrow=length(samples), ncol=dim(traits)[1], 0)#
	for(i in 1:dim(roadMap)[1])#
	{#
		roadMap[i,][sample(1:length(roadMap[i,]), samples[i])] <- 1#
	}#
#
	roadMap <- as.data.frame(roadMap)#
	row.names(roadMap) <- samples#
	names(roadMap) <- 1:dim(traits)[1]#
#
	results <- FDis(traits, roadMap)#
	return(results)#
}#
#
fdisRandomizer <- function(traits, samples, iterations)#
{#
	results <- matrix(nrow=iterations, ncol=length(samples), 0)#
#
	for(i in 1:iterations)#
	{#
		results[i,] <- fdisSingle(traits, samples)#
	}#
	return(results)#
}#
#
system.time(tempResults <- fdisRandomizer(traits, samples, 1000))
system.time(tempResults <- fdisRandomizer(traits, samples, 2))
head(tempResults)
head(samples)
tail(samples)
test <- rnorm(1000)
hist(test)
head(test)
test2 <- sample(test, 5)
mean(test2)
test2 <- sample(test, 5)
mean(test2)
test2 <- sample(test, 5)
mean(test2)
test2 <- sample(test, 5)
mean(test2)
test2 <- sample(test, 5)
mean(test2)
test2 <- sample(test, 1000)
mean(test2)
library(phytools)
?phylomorphospace
?fastAnc
library(metricTester)
?summaries
library(dplyr)#
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm)#
#
results <- reduceRandomizations(rawResults)
log(1)
log(0.5)
e
ln(e)
library(metricTester)
?summaries
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm)
library(devtools)
install_github("metricTester", username="eliotmiller")
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm)
str(rawResults,2)
packageVersion("geiger")
packageVersion("ape")
packageVersion("phylobase")
install_github("ecoPDcorr",username="eliotmiller")
packageVersion("phylobase")
install.packages("phylobase")
packageVersion("phylobase")
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm)
?getNode
ls()
test
library(metricTester)
metricsNnulls
?metricsNnulls
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1)
packageVersion("phylobase")
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1)
install.packages("phylobase")
library(metricTester)
library(ecoPD)
library(ecoPDcorr)
library(metricTester)
?simulateComm
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
cdm
ecoPD.cdm <- suppressWarnings(phylo4com(tree, t(cdm)))
ecoPD.cdm
?getNode
ls()
library(phylobase)
packageVersion("phylobase")
?getNode
data(geospiza)#
  nodeLabels(geospiza) <- LETTERS[1:nNodes(geospiza)]#
  plot(as(geospiza, "phylo4"), show.node.label=TRUE)#
  getNode(geospiza, 18)
getNode(geospiza, "D")
install.packages("phylobase")
?getNode
data(geospiza)#
  nodeLabels(geospiza) <- LETTERS[1:nNodes(geospiza)]#
  plot(as(geospiza, "phylo4"), show.node.label=TRUE)#
  getNode(geospiza, 18)
library(phylobase)
data(geospiza)#
  nodeLabels(geospiza) <- LETTERS[1:nNodes(geospiza)]#
  plot(as(geospiza, "phylo4"), show.node.label=TRUE)#
  getNode(geospiza, 18)
install.packages("ecoPD")
library(ecoPDcorr)
?pae
pae(weeds)
packageVersion(phylobase)
?phylo4com
data(weeds.data)#
  data(weeds.tree)#
  phylo4com(weeds.tree, weeds.data$cover, weeds.data$plot,#
    weeds.data$taxa)
silly <- phylo4com(weeds.tree, weeds.data$cover, weeds.data$plot,#
+     weeds.data$taxa)
phylo4com(weeds.tree, weeds.data$cover, weeds.data$plot,#
    weeds.data$taxa)
phylo4com(weeds.tree, weeds.data$cover, weeds.data$plot,#
    weeds.data$taxa)->st
pae(st)
library(metricTester)
?metricsNnulls
metricsNnulls
?prepDat
?prepData
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
prepped <- prepData(tree, cdm)
prepped
metricsNnulls
ls()
prepped
metricsNnulls
calcMetrics(prepped)
warnings()
calcMetrics
debug(calcMetrics)
calcMetrics(prepped)
?checkMetrics
checkMetrics(defineMetrics())
debug(calcMetrics)
calcMetrics(prepped)
getNode
ecoPDcorr
?pae
pae(weeds)
metrics <- checkMetrics(metrics)
cdm
prepped <- prepData(tree, cdm)
prepped
results <- calcMetrics(prepped)
?debug
undebug(calcMetrics)
checkMetrics()
checkMetrics(x)
checkMetrics(metrics)
checkMetrics(NULL)
prepped
metricTester::naw_mpd(prepped)
metricTester:::naw_mpd(prepped)
metricTester:::Haed(prepped)
metricTester:::my_PD_Cadotte(prepped)
metricTester:::Eed(prepped)
warnings()
metricTester:::Hed(prepped)
?eed
aed(weeds)
haed(weeds)
ls
ls()
class(st)
pae(st)
haed(st)
metricTester:::Hed(prepped)
hed(st)
hed
library(ecoPDcorr)
?hed
hed(weeds)
library(metricTester)
packageVersion("phylobase")
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)#
#
system.time(multiLinkerCL(tree=tree, arena.length=316, mean.log.individuals=4, #
 	length.parameter=1000, sd.parameter=40, max.distance=20, proportion.killed=0.2, #
	competition.iterations=60, no.quadrats=20, quadrat.length=sqrt(1000), #
	concat.by="richness", randomizations=1000, cores=8, iterations=10, prefix="test2"))
library(devtools)
install_github("metricTester", username="eliotmiller")
library(metricTester)#
#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=100)#
#
system.time(multiLinker(tree=tree, arena.length=316, mean.log.individuals=4, #
 	length.parameter=1000, sd.parameter=40, max.distance=20, proportion.killed=0.2, #
	competition.iterations=60, no.quadrats=20, quadrat.length=sqrt(1000), #
	concat.by="richness", randomizations=1000, cores=8, iterations=10, prefix="test2"))
library(ecoPDcorr)
library(devtools)
install_github("ecoPDcorr", username="eliotmiller")
library(ecoPDcorr)
packageVersion("phylobase")
install.packages("phylobase")
library(ecoPDcorr)
library(ecoPDcorr)#
#
hed(weeds)
pae(weeds)
iac(weeds)
haed(weeds)
eaed(weeds)
eed(weeds)
aed
aed(weeds)
hed(weeds)
eed(weeds)
aed(weeds)
pae(weeds)
iac(weeds)
haed(weeds)
eaed(weeds)
eed(weeds)
hed(weeds)
simpson(weeds)
simpson(weeds, method="phylogenetic")
pd(weeds)
install.packages("phylobase")
library(ecoPDcorr)
hed(weeds)
eaed(weeds)
hed(weeds)
ecoPD(weeds)
ecoPD(weeds, method="poly")
ecoPDcorr:::ecoPD(weeds, method="poly")
library(devtools)
install_github("ecoPDcorr", username="eliotmiller")
library(ecoPDcorr)
hed(weeds)
eaed(weeds)
library(methods)
hed(weeds)
remove.packages("ecoPD")
load("weeds.rda")
weeds
library(ecoPDcorr)
